import decimal

from aiogram import F
from aiogram.filters import Text
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from setup import admin_router
from src.database.crud.create import create_goods
from src.database.promo_queries import generate_new_code
from src.schemas import GoodsModel, PromoCodeModel
from src.telegram.buttons import admin_main_kb, build_cat_kb
from src.telegram.buttons import admin_main_kb, build_cat_kb, admin_generate_kod_kb
import peewee


class PromoCodeState(StatesGroup):
    max_use_left = State()
    discount_percent = State()
    code = State()


@admin_router.message(PromoCodeState.max_use_left)
async def anon(message: Message, state: FSMContext):
    max_use_left = message.text
    if not max_use_left.isdigit():
        await state.clear()
        await message.reply("‚ùå –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ!", reply_markup=admin_main_kb)
        return
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—É–º–º—É –∑–Ω–∏–∂–∫–∏")
    await state.update_data(max_use_left=int(max_use_left))
    await state.set_state(PromoCodeState.discount_percent)


@admin_router.message(PromoCodeState.discount_percent)
async def anon(message: Message, state: FSMContext):
    discount_percent = message.text
    if not discount_percent.isdigit():
        await state.clear()
        await message.reply("‚ùå –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —á–∏—Å–ª–æ!", reply_markup=admin_main_kb)
        return
    await message.answer(
        "–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤–æ—î –∑–Ω–∞—á–µ–Ω–Ω—è", reply_markup=admin_generate_kod_kb
    )
    await state.update_data(discount_percent=int(discount_percent))
    await state.set_state(PromoCodeState.code)


@admin_router.message(PromoCodeState.code)
async def anon(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    if message.text == "üé≤ –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏":
        await generate(message, data)
    elif message.text == "üõë –í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await message.answer("üõë –í—ñ–¥–º—ñ–Ω–µ–Ω–æ", reply_markup=admin_main_kb)
        await state.clear()
    else:
        await generate(message, data, code=message.text)


async def generate(message: Message, data: dict, code: str | None = None):
    try:
        code = generate_new_code(
            max_use_left=data["max_use_left"],
            discount_percent=data["discount_percent"],
            code=code,
        )
        await message.answer(
            f"–í—ñ—Ç–∞—î–º–æ!\n–í–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ - `{code.code}`\n"
            f"–ú–æ–∂–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ - *{code.max_use_left}* —Ä–∞–∑—ñ–≤\n"
            f"–ù–∞–¥–∞—î —Å–∫–∏–¥–∫—É - *{code.discount_percent}* %",
            reply_markup=admin_main_kb,
            parse_mode="MARKDOWN",
        )
    except peewee.IntegrityError:
        await message.answer("üõë –¶–µ–π –∫–æ–¥ –≤–∂–µ —ñ—Å–Ω—É—î!", reply_markup=admin_main_kb)
