from pprint import pprint

from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from peewee import IntegrityError

from setup import user_router
from src.database.crud.create import create_address
from src.schemas import AddressModel
from src.telegram.buttons import user_main_btn


class AddressState(StatesGroup):
    full_name = State()
    mobile_number = State()
    city = State()
    post_number = State()
    user_id = State()


@user_router.message(F.text.casefold() == "‚ùå –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–í—ñ–¥–º—ñ–Ω–µ–Ω–æ.", reply_markup=user_main_btn)


@user_router.message(AddressState.full_name)
async def set_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(AddressState.mobile_number)
    await message.answer("–í–≤–µ–¥–∏—Ç—å —Å–≤—ñ–π –º–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç—ñ `380673171111`",
                         parse_mode="MARKDOWN",)


@user_router.message(AddressState.mobile_number)
async def set_name(message: Message, state: FSMContext):
    number = message.text
    if not number.isdigit() or len(number) != 12 or not number.startswith("380"):
        await state.clear()
        await message.reply("‚ùå –ù–µ –≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–ù–æ–º–µ—Ä –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 380", reply_markup=user_main_btn)
        return

    await state.update_data(mobile_number=message.text)
    await state.set_state(AddressState.city)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ –º—ñ—Å—Ç–∞")


@user_router.message(AddressState.city)
async def set_name(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ—à—Ç–∏")
    await state.set_state(AddressState.post_number)


@user_router.message(AddressState.post_number)
async def set_name(message: Message, state: FSMContext):
    number = message.text
    if not number.isdigit():
        await message.reply("‚ùå –ù–µ –≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!", reply_markup=user_main_btn)
    else:
        await state.update_data(post_number=message.text)
        await state.update_data(user_id=message.from_user.id)
        data = await state.get_data()
        data = AddressModel(**data)
        try:
            create_address(data)
            msg = "‚úÖ –í–∏ –¥–æ–¥–∞–ª–∏ –∞–¥—Ä–µ—Å—Å!"
        except IntegrityError:
            msg = "üõë –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å"
        await message.answer(msg, reply_markup=user_main_btn)
    await state.clear()
