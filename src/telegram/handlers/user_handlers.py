from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, Text
from aiogram import F
from setup import user_router
from src.database.crud.get import get_user_schema_by_id
from src.schemas import UserModel
# from src.database.queries import get_order_by_id
# from src.messages import show_accounts_price, show_order
from src.telegram.buttons import user_main_btn, build_acc_btns, community_btn, cancel_btn, build_profile_kb, \
    addr_inline_fields
from setup import bot
from src.telegram.handlers.fsm_h.user_fsm.address.add_address import AddressState
from src.telegram.handlers.fsm_h.user_fsm.address.update_address import UpdateAddr
from src.telegram.messages.user_msg import build_address_msg


# from src.telegram.handlers.fsm_h.user_fsm.create_order import OrdrState


@user_router.message(F.text.in_(['/start', "‚Ü©Ô∏è –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]))
async def test(message: Message):
    await message.answer("bot works",
                         reply_markup=user_main_btn)


@user_router.message(F.text == "üõí –û–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def show_price(message: Message):
    # msg = show_accounts_price()
    msg = "1"
    await message.answer(msg, reply_markup=user_main_btn)


@user_router.message(F.text == "üè† –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å")
async def show_price(message: Message, state: FSMContext):
    await state.set_state(AddressState.full_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è", reply_markup=cancel_btn)


# @user_router.message(F.text == "–ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç‚ö°Ô∏è")
# async def new_order(message: Message, state: FSMContext):
#     await message.answer("–ö–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?",
#                          reply_markup=build_acc_btns())
#     await state.set_state(OrdrState.account_name)
#     await state.update_data(user_id=message.from_user.id)


@user_router.message(F.text == "‚úçÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫")
async def community(message: Message):
    await message.answer("ü¶æ",
                         reply_markup=community_btn)


@user_router.message(F.text == "üï∫ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
async def profile(message: Message):
    await message.answer("üï∫  –ø—Ä–æ—Ñ—ñ–ª—å", reply_markup=build_profile_kb(message.from_user.id))


@user_router.message(F.text == "üî® –û–Ω–æ–≤–∏—Ç–∏ –∞–¥—Ä–µ—Å")
async def addr(message: Message):
    user = get_user_schema_by_id(message.from_user.id)
    addr = build_address_msg(user.address)
    await message.answer(addr, parse_mode="MARKDOWN", reply_markup=addr_inline_fields)

    # TODO: make adressupdatable

"""
    full_name: str
    mobile_number: str
    city: str
    post_number: int
    user: int
"""


@user_router.callback_query(F.data.in_(["full_name", "mobile_number", "city", "post_number"]))
async def update_addr(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UpdateAddr.new_value)
    await state.update_data(field=callback.data)
    await callback.message.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–∞–Ω–Ω—è:")
    await callback.answer()
    # await message.answer(addr, parse_mode="MARKDOWN", reply_markup=addr_inline_fields)


# @user_router.message(F.text == "/test")
# async def test(message: Message):
#     order = get_order_by_id(1)
#     msg = show_order(order)
#     await message.answer(msg, parse_mode="MARKDOWN")


@user_router.message(F.text == "üß© –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
async def test(message: Message):

    await message.answer("dwa", parse_mode="MARKDOWN")


